From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Softik Lord <dimap9986@gmail.com>
Date: Thu, 14 Jul 2022 06:18:40 +0500
Subject: [PATCH] perf: further improve server tick loop

Credits to Paper

diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index dc05aad6b67db3080eb7f98b7244ae9cc629be8a..b9d104beac9d596b62af9d2406a03ee976be8532 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -588,39 +588,47 @@ public abstract class MinecraftServer implements ICommandListener, Runnable, IAs
     public static class RollingAverage {
         private final int size;
         private long time;
-        private double total;
+        private java.math.BigDecimal total; // Reaper
         private int index = 0;
-        private final double[] samples;
+        private final java.math.BigDecimal[] samples; // Reaper
         private final long[] times;
 
         RollingAverage(int size) {
             this.size = size;
             this.time = size * SEC_IN_NANO;
-            this.total = TPS * SEC_IN_NANO * size;
-            this.samples = new double[size];
+            // Reaper start
+            this.total = dec(TPS).multiply(dec(SEC_IN_NANO)).multiply(dec(size));
+            this.samples = new java.math.BigDecimal[size];
+            // Reaper end
             this.times = new long[size];
             for (int i = 0; i < size; i++) {
-                this.samples[i] = TPS;
+                this.samples[i] = dec(TPS); // Reaper
                 this.times[i] = SEC_IN_NANO;
             }
         }
 
-        public void add(double x, long t) {
+        // Reaper start
+        private static java.math.BigDecimal dec(long t) {
+            return new java.math.BigDecimal(t);
+        }
+        // Reaper end
+        public void add(java.math.BigDecimal x, long t) { // Reaper
             time -= times[index];
-            total -= samples[index] * times[index];
+            // total -= samples[index] * times[index]; // Reaper
             samples[index] = x;
             times[index] = t;
             time += t;
-            total += x * t;
+            total = total.add(x.multiply(dec(t))); // Reaper
             if (++index == size) {
                 index = 0;
             }
         }
 
         public double getAverage() {
-            return total / time;
+            return total.divide(dec(time), 30, java.math.RoundingMode.HALF_UP).doubleValue(); // Reaper
         }
     }
+    private static final java.math.BigDecimal TPS_BASE = new java.math.BigDecimal(1E9).multiply(new java.math.BigDecimal(SAMPLE_INTERVAL)); // Reaper
     // Paper End
 
     public void run() {
@@ -662,7 +670,7 @@ public abstract class MinecraftServer implements ICommandListener, Runnable, IAs
                     if ( ++MinecraftServer.currentTick % SAMPLE_INTERVAL == 0 )
                     {
                         final long diff = curTime - tickSection;
-                        double currentTps = 1E9 / diff * SAMPLE_INTERVAL;
+                        java.math.BigDecimal currentTps = TPS_BASE.divide(new java.math.BigDecimal(diff), 30, java.math.RoundingMode.HALF_UP); // Reaper
                         tps1.add(currentTps, diff);
                         tps5.add(currentTps, diff);
                         tps15.add(currentTps, diff);
diff --git a/src/main/java/org/spigotmc/TicksPerSecondCommand.java b/src/main/java/org/spigotmc/TicksPerSecondCommand.java
index 6d21c326922ad424734c803c8f0ab586bfa999b7..53e330a6a1edf62b006b567081849acdbceccec3 100644
--- a/src/main/java/org/spigotmc/TicksPerSecondCommand.java
+++ b/src/main/java/org/spigotmc/TicksPerSecondCommand.java
@@ -39,6 +39,6 @@ public class TicksPerSecondCommand extends Command
     private static String format(double tps) // Paper - Made static
     {
         return ( ( tps > 18.0 ) ? ChatColor.GREEN : ( tps > 16.0 ) ? ChatColor.YELLOW : ChatColor.RED ).toString()
-                + ( ( tps > 20.0 ) ? "*" : "" ) + Math.min( Math.round( tps * 100.0 ) / 100.0, 20.0 );
+                + ( ( tps > 21.0 ) ? "*" : "" ) + Math.min( Math.round( tps * 100.0 ) / 100.0, 20.0 ); // Reaper - Only print * at 21, we commonly peak to 20.02 as the tick sleep is not accurate enough, stop the noise
     }
 }
