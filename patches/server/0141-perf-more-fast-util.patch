From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Softik Lord <dimap9986@gmail.com>
Date: Fri, 15 Jul 2022 02:25:38 +0500
Subject: [PATCH] perf-more-fast-util


diff --git a/src/main/java/net/minecraft/server/HandshakeListener.java b/src/main/java/net/minecraft/server/HandshakeListener.java
index 3a972199c72b64b4757211eb7ac1a4267aa09a1b..083ec2aab4e170f2133782fc6998548cd160f946 100644
--- a/src/main/java/net/minecraft/server/HandshakeListener.java
+++ b/src/main/java/net/minecraft/server/HandshakeListener.java
@@ -1,15 +1,16 @@
 package net.minecraft.server;
 
 // CraftBukkit start
+import it.unimi.dsi.fastutil.objects.Object2LongOpenHashMap;
+
 import java.net.InetAddress;
-import java.util.HashMap;
 // CraftBukkit end
 
 public class HandshakeListener implements PacketHandshakingInListener {
 
     private static final com.google.gson.Gson gson = new com.google.gson.Gson(); // Spigot
     // CraftBukkit start - add fields
-    private static final HashMap<InetAddress, Long> throttleTracker = new HashMap<InetAddress, Long>();
+    private static final Object2LongOpenHashMap<InetAddress> throttleTracker = new Object2LongOpenHashMap<>(); // Reaper
     private static int throttleCounter = 0;
     // CraftBukkit end
 
@@ -52,13 +53,7 @@ public class HandshakeListener implements PacketHandshakingInListener {
                         throttleCounter = 0;
 
                         // Cleanup stale entries
-                        java.util.Iterator iter = throttleTracker.entrySet().iterator();
-                        while (iter.hasNext()) {
-                            java.util.Map.Entry<InetAddress, Long> entry = (java.util.Map.Entry) iter.next();
-                            if (entry.getValue() > connectionThrottle) {
-                                iter.remove();
-                            }
-                        }
+                        throttleTracker.object2LongEntrySet().removeIf(entry -> entry.getLongValue() > connectionThrottle); // Reaper
                     }
                 }
             } catch (Throwable t) {
diff --git a/src/main/java/net/minecraft/server/PlayerList.java b/src/main/java/net/minecraft/server/PlayerList.java
index 599886fa80f66fdce044497e384085dc09a34816..59ef61dbdd7664eedb632cfc8c2e20904a0a4491 100644
--- a/src/main/java/net/minecraft/server/PlayerList.java
+++ b/src/main/java/net/minecraft/server/PlayerList.java
@@ -75,8 +75,20 @@ public abstract class PlayerList {
     private int v;
 
     // CraftBukkit start
-    private CraftServer cserver;
-    private final Map<String,EntityPlayer> playersByName = new org.spigotmc.CaseInsensitiveMap<EntityPlayer>();
+    private final CraftServer cserver;
+    private final Map<String,EntityPlayer> playersByName = new it.unimi.dsi.fastutil.objects.Object2ObjectOpenCustomHashMap<String, EntityPlayer>(
+            new it.unimi.dsi.fastutil.Hash.Strategy<String>() {
+                @Override
+                public int hashCode(String o) {
+                    return o.toLowerCase().hashCode();
+                }
+
+                @Override
+                public boolean equals(String a, String b) {
+                    return a.equalsIgnoreCase(b);
+                }
+            }
+    );
     @Nullable String collideRuleTeamName; // Paper - Team name used for collideRule
 
     public PlayerList(MinecraftServer minecraftserver) {
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java
index 50858abf13c1a53a4c45deb7ee28ffc76371e44d..add4e9358e2454f6ce53edfedb307c7b6a406593 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java
@@ -311,19 +311,22 @@ class CraftMetaItem implements ItemMeta, Repairable {
             NBTTagList nbttaglist = tag.getList(ATTRIBUTES.NBT, CraftMagicNumbers.NBT.TAG_COMPOUND);
 
             // Spigot start
-            gnu.trove.map.hash.TObjectDoubleHashMap<String> attributeTracker = new gnu.trove.map.hash.TObjectDoubleHashMap<String>();
-            gnu.trove.map.hash.TObjectDoubleHashMap<String> attributeTrackerX = new gnu.trove.map.hash.TObjectDoubleHashMap<String>();
-            Map<String, IAttribute> attributesByName = new HashMap<String, IAttribute>();
+            // Reaper - use fastutil instead of trove
+            it.unimi.dsi.fastutil.objects.Object2DoubleOpenHashMap<String> attributeTracker = new it.unimi.dsi.fastutil.objects.Object2DoubleOpenHashMap<String>();
+            it.unimi.dsi.fastutil.objects.Object2DoubleOpenHashMap<String> attributeTrackerX = new it.unimi.dsi.fastutil.objects.Object2DoubleOpenHashMap<String>();
+            final Map<String, IAttribute> attributesByName = ImmutableMap.of(
+                    "generic.maxHealth", GenericAttributes.maxHealth,
+                    "generic.followRange", GenericAttributes.FOLLOW_RANGE,
+                    "generic.knockbackResistance", GenericAttributes.c,
+                    "generic.movementSpeed", GenericAttributes.MOVEMENT_SPEED,
+                    "generic.attackDamage", GenericAttributes.ATTACK_DAMAGE
+            );
             attributeTracker.put( "generic.maxHealth", 20.0 );
-            attributesByName.put( "generic.maxHealth", GenericAttributes.maxHealth );
             attributeTracker.put( "generic.followRange", 32.0 );
-            attributesByName.put( "generic.followRange", GenericAttributes.FOLLOW_RANGE );
             attributeTracker.put( "generic.knockbackResistance", 0.0 );
-            attributesByName.put( "generic.knockbackResistance", GenericAttributes.c );
             attributeTracker.put( "generic.movementSpeed", 0.7 );
-            attributesByName.put( "generic.movementSpeed", GenericAttributes.MOVEMENT_SPEED );
             attributeTracker.put( "generic.attackDamage", 1.0 );
-            attributesByName.put( "generic.attackDamage", GenericAttributes.ATTACK_DAMAGE );
+            // Reaper end
             NBTTagList oldList = nbttaglist;
             nbttaglist = new NBTTagList();
 
diff --git a/src/main/java/org/spigotmc/CaseInsensitiveMap.java b/src/main/java/org/spigotmc/CaseInsensitiveMap.java
deleted file mode 100644
index 1934fd50ad103970c20ad52ac32c3a6a3353b17e..0000000000000000000000000000000000000000
--- a/src/main/java/org/spigotmc/CaseInsensitiveMap.java
+++ /dev/null
@@ -1,15 +0,0 @@
-package org.spigotmc;
-
-import gnu.trove.map.hash.TCustomHashMap;
-import java.util.Map;
-
-public class CaseInsensitiveMap<V> extends TCustomHashMap<String, V> {
-
-    public CaseInsensitiveMap() {
-        super(CaseInsensitiveHashingStrategy.INSTANCE);
-    }
-
-    public CaseInsensitiveMap(Map<? extends String, ? extends V> map) {
-        super(CaseInsensitiveHashingStrategy.INSTANCE, map);
-    }
-}
diff --git a/src/main/java/org/spigotmc/SpigotConfig.java b/src/main/java/org/spigotmc/SpigotConfig.java
index 2cdd9aaf81c792bac9477b2296d67860bcbc387f..aff5272a84d87483503fa696e392f7809d0a3f6f 100644
--- a/src/main/java/org/spigotmc/SpigotConfig.java
+++ b/src/main/java/org/spigotmc/SpigotConfig.java
@@ -1,19 +1,7 @@
 package org.spigotmc;
 
 import com.google.common.base.Throwables;
-import java.io.File;
-import java.io.IOException;
-import java.lang.reflect.InvocationTargetException;
-import java.lang.reflect.Method;
-import java.lang.reflect.Modifier;
-import java.util.Arrays;
-import java.util.HashMap;
-import java.util.HashSet;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
-import java.util.logging.Level;
-import gnu.trove.map.hash.TObjectIntHashMap;
+import it.unimi.dsi.fastutil.objects.Object2IntOpenHashMap;
 import net.minecraft.server.AttributeRanged;
 import net.minecraft.server.GenericAttributes;
 import net.minecraft.server.MinecraftServer;
@@ -28,6 +16,14 @@ import org.bukkit.configuration.ConfigurationSection;
 import org.bukkit.configuration.InvalidConfigurationException;
 import org.bukkit.configuration.file.YamlConfiguration;
 
+import java.io.File;
+import java.io.IOException;
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
+import java.lang.reflect.Modifier;
+import java.util.*;
+import java.util.logging.Level;
+
 public class SpigotConfig
 {
 
@@ -249,7 +245,7 @@ public class SpigotConfig
     }
 
     public static boolean disableStatSaving;
-    public static TObjectIntHashMap<String> forcedStats = new TObjectIntHashMap<String>();
+    public static Object2IntOpenHashMap<String> forcedStats = new Object2IntOpenHashMap<String>();
     private static void stats()
     {
         disableStatSaving = getBoolean( "stats.disable-saving", false );
