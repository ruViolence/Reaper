From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Softik Lord <dimap9986@gmail.com>
Date: Fri, 15 Jul 2022 03:00:47 +0500
Subject: [PATCH] perf-optimize-the-advancement-data-player

Optimize the advancement data player iteration to be O(N) rather than O(N^2)

diff --git a/src/main/java/net/minecraft/server/AdvancementDataPlayer.java b/src/main/java/net/minecraft/server/AdvancementDataPlayer.java
index 6353107bc122731a597131bbfaead2c507b2d7e8..1d22700f01144c6aee00f445cf6a16333f2a827b 100644
--- a/src/main/java/net/minecraft/server/AdvancementDataPlayer.java
+++ b/src/main/java/net/minecraft/server/AdvancementDataPlayer.java
@@ -356,6 +356,16 @@ public class AdvancementDataPlayer {
     }
 
     private void e(Advancement advancement) {
+        // Reaper start
+        e(advancement, IterationEntryPoint.ROOT);
+    }
+    private enum IterationEntryPoint {
+        ROOT,
+        ITERATOR,
+        PARENT_OF_ITERATOR
+    }
+    private void e(Advancement advancement, IterationEntryPoint entryPoint) {
+        // Reaper end
         boolean flag = this.f(advancement);
         boolean flag1 = this.g.contains(advancement);
 
@@ -371,15 +381,23 @@ public class AdvancementDataPlayer {
         }
 
         if (flag != flag1 && advancement.b() != null) {
-            this.e(advancement.b());
+            // Reaper start - If we're not coming from an iterator consider this to be a root entry, otherwise
+            // market that we're entering from the parent of an iterator.
+            this.e(advancement.b(), entryPoint == IterationEntryPoint.ITERATOR ? IterationEntryPoint.PARENT_OF_ITERATOR : IterationEntryPoint.ROOT);
         }
 
+        // If this is true, we've went through a child iteration, entered the parent, processed the parent
+        // and are about to reprocess the children. Stop processing here to prevent O(N^2) processing.
+        if (entryPoint == IterationEntryPoint.PARENT_OF_ITERATOR) {
+            return;
+        } // Reaper end
+
         Iterator iterator = advancement.e().iterator();
 
         while (iterator.hasNext()) {
             Advancement advancement1 = (Advancement) iterator.next();
 
-            this.e(advancement1);
+            this.e(advancement1, IterationEntryPoint.ITERATOR); // Reaper - Mark this call as being from iteration
         }
 
     }
