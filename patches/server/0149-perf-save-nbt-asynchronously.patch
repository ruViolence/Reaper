From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Softik Lord <dimap9986@gmail.com>
Date: Sat, 16 Jul 2022 09:39:17 +0500
Subject: [PATCH] perf-save-nbt-asynchronously


diff --git a/src/main/java/com/github/ruviolence/reaper/ReaperConfig.java b/src/main/java/com/github/ruviolence/reaper/ReaperConfig.java
index e7103a9f01a41ddd277f2320d48f2fa80a7683b5..bc24f0890511ed183301413cd8ed28e8aad90348 100644
--- a/src/main/java/com/github/ruviolence/reaper/ReaperConfig.java
+++ b/src/main/java/com/github/ruviolence/reaper/ReaperConfig.java
@@ -271,4 +271,8 @@ public class ReaperConfig {
     private static void useEigencraftRedstone() {
         useEigencraftRedstone = getBoolean("use-Eigencraft-Redstone", true);
     }
+    public static int maxDataSaveThreads = 8;
+    private static void maxDataSaveThreads() {
+        maxDataSaveThreads = getInt("settings.max-data-save-threads", 8);
+    }
 }
diff --git a/src/main/java/net/minecraft/server/PersistentCollection.java b/src/main/java/net/minecraft/server/PersistentCollection.java
index 50056f49a8eaea687d00175e41a877040934e9ae..4474d452b633101993f5c000e3c43d8cf6f9b4dc 100644
--- a/src/main/java/net/minecraft/server/PersistentCollection.java
+++ b/src/main/java/net/minecraft/server/PersistentCollection.java
@@ -1,6 +1,7 @@
 package net.minecraft.server;
 
 import com.destroystokyo.paper.exception.ServerInternalException;
+import com.github.ruviolence.reaper.ReaperConfig;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
 import java.io.DataInputStream;
@@ -15,6 +16,7 @@ import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
 import javax.annotation.Nullable;
+import java.util.ConcurrentModificationException;
 
 public class PersistentCollection {
 
@@ -88,8 +90,15 @@ public class PersistentCollection {
 
     }
 
+    private static final java.util.concurrent.ExecutorService SAVE_EXECUTOR = java.util.concurrent.Executors.newFixedThreadPool(ReaperConfig.maxDataSaveThreads); // Reaper
     private void a(PersistentBase persistentbase) {
+        // Reaper start
+        a(persistentbase, new java.util.concurrent.atomic.AtomicInteger());
+        }
+    private void a(PersistentBase persistentbase, java.util.concurrent.atomic.AtomicInteger tries) {
+        // Reaper end
         if (this.b != null) {
+            SAVE_EXECUTOR.submit(() -> { // Reaper
             try {
                 File file = this.b.getDataFile(persistentbase.id);
 
@@ -102,10 +111,20 @@ public class PersistentCollection {
                     NBTCompressedStreamTools.a(nbttagcompound, (OutputStream) fileoutputstream);
                     fileoutputstream.close();
                 }
+            // Reaper start
+            } catch (ConcurrentModificationException ex) {
+                if (tries.incrementAndGet() > 5) {
+                    ex.printStackTrace();
+                    ServerInternalException.reportInternalException(ex);
+                } else {
+                    a(persistentbase, tries);
+                }
+            // Reaper end
             } catch (Exception exception) {
                 exception.printStackTrace();
                 ServerInternalException.reportInternalException(exception); // Paper
             }
+            }); // Reaper
 
         }
     }
