From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Softik Lord <dimap9986@gmail.com>
Date: Sat, 16 Jul 2022 09:44:10 +0500
Subject: [PATCH] perf-don-t-use-synchronized-on-RegionFile


diff --git a/src/main/java/net/minecraft/server/PersistentCollection.java b/src/main/java/net/minecraft/server/PersistentCollection.java
index 4474d452b633101993f5c000e3c43d8cf6f9b4dc..289f3110d9cf9cedf604b944c4871ab51000b9df 100644
--- a/src/main/java/net/minecraft/server/PersistentCollection.java
+++ b/src/main/java/net/minecraft/server/PersistentCollection.java
@@ -117,6 +117,11 @@ public class PersistentCollection {
                     ex.printStackTrace();
                     ServerInternalException.reportInternalException(ex);
                 } else {
+                    try {
+                        Thread.sleep(50);
+                    } catch (InterruptedException e) {
+                        Thread.currentThread().interrupt();
+                    }
                     a(persistentbase, tries);
                 }
             // Reaper end
diff --git a/src/main/java/net/minecraft/server/RegionFile.java b/src/main/java/net/minecraft/server/RegionFile.java
index 273dc269d5617ce1dd9206014cf77cde11bf7ae1..3f3a75a05bc57bcb4d1b41ef192bec932f3b7a0d 100644
--- a/src/main/java/net/minecraft/server/RegionFile.java
+++ b/src/main/java/net/minecraft/server/RegionFile.java
@@ -30,8 +30,8 @@ public class RegionFile {
     private static final byte[] a = new byte[4096];
     private final File b;private File getFile() { return b; } // Paper - OBFHELPER
     private RandomAccessFile c;private RandomAccessFile getDataFile() { return c; } // Paper - OBFHELPER
-    private final int[] d = new int[1024];private int[] offsets = d; // Paper - OBFHELPER
-    private final int[] e = new int[1024];private int[] timestamps = e; // Paper - OBFHELPER
+    private final java.util.concurrent.atomic.AtomicIntegerArray d = new java.util.concurrent.atomic.AtomicIntegerArray(1024);private java.util.concurrent.atomic.AtomicIntegerArray offsets = d; // Paper - OBFHELPER // Reaper - use AtomicIntegerArray
+    private final java.util.concurrent.atomic.AtomicIntegerArray e = new java.util.concurrent.atomic.AtomicIntegerArray(1024);private java.util.concurrent.atomic.AtomicIntegerArray timestamps = e; // Paper - OBFHELPER // Reaper - use AtomicIntegerArray
     private List<Boolean> f;
     private int g;
     private long h;
@@ -87,7 +87,7 @@ public class RegionFile {
             // Paper End
             for (j = 0; j < 1024; ++j) {
                 k = headerAsInts.get(); // Paper
-                this.d[j] = k;
+                this.d.set(j, k); // Reaper
                 // Spigot start
                 int length = k & 255;
                 if (length == 255) {
@@ -114,7 +114,7 @@ public class RegionFile {
 
             for (j = 0; j < 1024; ++j) {
                 k = headerAsInts.get(); // Paper
-                if (offsets[j] != 0) this.timestamps[j] = k; // Paper - don't set timestamp if it got 0'd above due to corruption
+                if (offsets.get(j) != 0) this.timestamps.set(j, k); // Reaper - don't set timestamp if it got 0'd above due to corruption // Reaper
             }
         } catch (IOException ioexception) {
             ioexception.printStackTrace();
@@ -279,8 +279,8 @@ public class RegionFile {
         return i < 0 || i >= 32 || j < 0 || j >= 32;
     }
 
-    private synchronized int getOffset(int i, int j) {
-        return this.d[i + j * 32];
+    private int getOffset(int i, int j) { // Reaper - remove synchronized
+        return this.d.get(i + j * 32); // Reaper
     }
 
     public boolean c(int i, int j) {
@@ -288,13 +288,13 @@ public class RegionFile {
     }
 
     private void a(int i, int j, int k) throws IOException {
-        this.d[i + j * 32] = k;
+        this.d.set(i + j * 32, k); // Reaper
         this.c.seek((long) ((i + j * 32) * 4));
         this.c.writeInt(k);
     }
 
     private void b(int i, int j, int k) throws IOException {
-        this.e[i + j * 32] = k;
+        this.e.set(i + j * 32, k); // Reaper
         this.c.seek((long) (4096 + (i + j * 32) * 4));
         this.c.writeInt(k);
     }
@@ -307,9 +307,9 @@ public class RegionFile {
     }
 
     // Paper start
-    public synchronized void deleteChunk(int j1) {
+    public void deleteChunk(int j1) { // Reaper - remove synchronized
         backup();
-        int k = offsets[j1];
+        int k = offsets.get(j1); // Reaper
         int x = j1 & 1024;
         int z = j1 >> 2;
         int offset = (k >> 8);
@@ -323,8 +323,8 @@ public class RegionFile {
             // clear the timestamp
             file.seek(4096 + j1 * 4);
             file.writeInt(0);
-            timestamps[j1] = 0;
-            offsets[j1] = 0;
+            timestamps.set(j1, 0); // Reaper
+            offsets.set(j1, 0); // Reaper
             logger.error("Deleted corrupt chunk (" + debug + ") " + getFile().getAbsolutePath(), e);
         } catch (IOException e) {
 
